<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on (m)att(h)e(w) (d)a(v)i(s)</title><link>https://mhwdvs.github.io/tags/</link><description>Recent content in Tags on (m)att(h)e(w) (d)a(v)i(s)</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://mhwdvs.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>Using git-crypt</title><link>https://mhwdvs.github.io/using-git-crypt/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://mhwdvs.github.io/using-git-crypt/</guid><description>&lt;p>&lt;code>git-crypt&lt;/code> is a simple tool for encrypting files in a git repository. It&amp;rsquo;s good for both text and binary files, and ideal for public repositories, protecting files that are both sensible to source control (ie. that shouldn&amp;rsquo;t be in your &lt;code>.gitignore&lt;/code>), but contain sensitive info you might not want public. My first use case is for my Nix/NixOS/home-manager configuration (&lt;a href="">https://github.com/mhwdvs/hm/&lt;/a>), where I need to add some sensitive configuration details for work, but still want to source control my changes and conveniently access the configuration across multiple machines.&lt;/p>
&lt;p>Let&amp;rsquo;s get started.&lt;/p>
&lt;h2 id="i-havent-used-git-crypt-before-and-dont-have-a-key-yet-or-i-want-a-new-key-for-every-repository-i-use-git-crypt-in">I haven&amp;rsquo;t used git-crypt before and don&amp;rsquo;t have a key yet, or I want a new key for every repository I use &lt;code>git-crypt&lt;/code> in&lt;/h2>
&lt;ul>
&lt;li>&lt;code>git-crypt init&lt;/code>&lt;/li>
&lt;li>&lt;code>git-crypt export-key ./git-crypt-key&lt;/code> (will output file &lt;code>git-crypt-key&lt;/code>, your symmetric key)&lt;/li>
&lt;/ul>
&lt;h2 id="i-already-have-a-key-from-git-crypt-and-i-want-to-use-it-for-another-repository">I already have a key from git-crypt and I want to use it for another repository&lt;/h2>
&lt;ul>
&lt;li>Commit at least one file to the repository (not one that should be encrypted). A good first file may be a &lt;code>README.md&lt;/code> or &lt;code>.gitignore&lt;/code>&lt;/li>
&lt;li>&lt;code>git-crypt init&lt;/code>&lt;/li>
&lt;li>&lt;code>git-crypt decrypt &amp;lt;common PGP key file&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="add-your-key-file-to-your-repositories-gitignore">Add your key file to your repositories&amp;rsquo; &lt;code>.gitignore&lt;/code>&lt;/h2>
&lt;p>It&amp;rsquo;s vital that you &lt;strong>don&amp;rsquo;t&lt;/strong> commit your key file to your repository. Append the name of your key file to your repositories &lt;code>.gitignore&lt;/code> so that git ignores it.&lt;/p>
&lt;h2 id="createappend-gitattributes">Create/Append &lt;code>.gitattributes&lt;/code>&lt;/h2>
&lt;p>This is where we add rules that tell git-crypt what files it should encrypt. &lt;code>.gitattributes&lt;/code> should be created at the root of your git repository if it doesn&amp;rsquo;t already exist. The lines you add to it for &lt;code>git-crypt&lt;/code> should look something like this;&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;file name&amp;gt; filter=git-crypt diff=git-crypt
&lt;/code>&lt;/pre>&lt;p>The file name can be a literal file name, or utilise wildcards (&lt;code>*&lt;/code>) to target many files (eg. &lt;code>*.key&lt;/code> to encrypt all files ending in &lt;code>.key&lt;/code>), or use any other logic git supports in it&amp;rsquo;s &lt;code>.gitattributes&lt;/code>.&lt;/p>
&lt;p>Commit this file to your git repository.&lt;/p>
&lt;h2 id="add-your-secret-files">Add your secret files&lt;/h2>
&lt;p>What the heading says.&lt;/p>
&lt;p>&lt;code>git-crypt status&lt;/code> will tell you what files it is managing. Note that you don&amp;rsquo;t have to commit secret files to your repository for them to show as &amp;ldquo;encrypted&amp;rdquo; in this dialog, so you have the opportunity to check that everything is working as intended before committing your secrets and potentially having them be pushed out into the public.&lt;/p></description></item></channel></rss>